#include "common.h"
#include "mblur.h"
#include "dof.h"

struct 	v2p
{
  float4 tc0: 		TEXCOORD0;	// Center
  float4 tc1: 		TEXCOORD1;	// LT 		 
  float4 tc2: 		TEXCOORD2;	// RB
  float4 tc3: 		TEXCOORD3;	// RT 
  float4 tc4: 		TEXCOORD4;	// LB
  float4 tc5:		TEXCOORD5;	// Left	/ Right	
  float4 tc6:		TEXCOORD6;	// Top  / Bottom 
};

//////////////////////////////////////////////////////////////////////////////////////////
uniform sampler2D 	s_distort;
#define	EPSDEPTH	0.001
uniform half4 		e_barrier;	// x=norm(.8f), y=depth(.1f), z=clr
uniform half4 		e_weights;	// x=norm, y=depth, z=clr
uniform half4 		e_kernel;	// x=norm, y=depth, z=clr
uniform float4		effect_params;	// x=vibrance, y=vignette
uniform float4		color_grading;	// rgb=color, w=intensity

#include "vibrance.h"
#include "vignette.h"

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
half4 	main		( v2p I )	: COLOR
{
#ifdef 	USE_DISTORT
  	half 	depth 	= tex2D 	(s_position, 	I.tc0).z;
	half4 	distort	= tex2D		(s_distort, 	I.tc0)	;
	half2	offset	= (distort.xy-.5h)*def_distort		;
//	half2	offset	= (distort.xy-(127.0h/255.0h))*def_distort;  // fix newtral offset
	float2	center	= I.tc0 + offset;
	half 	depth_x	= tex2D 	(s_position, center).z	;
	if ((depth_x+EPSDEPTH)<depth)	center	= I.tc0;	// discard new sample
#else
	float2	center 	= I.tc0		;
#endif
    	//half3 	img 	= tex2D		(s_image, center);
	half3	img	= dof(center);
	half4 	bloom	= tex2D		(s_bloom, center);
	
			img 	= mblur		(center,tex2D(s_position,I.tc0),img.rgb);

#ifdef 	USE_DISTORT
 	half3	blurred	= bloom*def_hdr	;
			img		= lerp	(img,blurred,distort.z);
#endif
	img = VibrancePass(img); // Vibrance

 	float4 result = combine_bloom(img, bloom);

	result.rgb = VignettePass(center - float2(0.5f, 0.5f), result.rgb); // Vignette

	// Color grading
#ifdef USE_COLOR_GRADING
	const float3 luminance = float3(0.213f, 0.715f, 0.072f);
	float lum = dot(result.rgb, luminance)*2.f;

	float3 min = 0.0f;
	float3 med = color_grading.xyz;
	float3 max = 1.0f;

	img = lerp(float3(0,0,0), med, saturate(lum*2.0f));
	img = lerp(img, float3(1,1,1), saturate(lum-0.5f)*2.0f);

	result.rgb = saturate(lerp(result.rgb, img, saturate(lum*color_grading.w)));
#endif

	return result;
}
