#include "common.h"
#define USE_DX9_LOAD
#include "SSLR.h"

struct   vf
{
	float4	hpos	 : POSITION	;
	float2  tbase	 : TEXCOORD0;  // base
	float4	tnorm	 : TEXCOORD1;  // nm0.xy nm1.zw
	float4	pos		 : TEXCOORD2;
	half3	M1		 : TEXCOORD3;
	half3	M2		 : TEXCOORD4;
	half3	M3		 : TEXCOORD5;
	half3	v2point	 : TEXCOORD6;
	float4	tctexgen : TEXCOORD7;
	half4	c0		 : COLOR0	;
};

uniform sampler2D	s_nmap;
uniform sampler2D	s_leaves;

#if defined(USE_SOFT_WATER) && defined(NEED_SOFT_WATER)
half3	water_intensity;
#endif	//	defined(USE_SOFT_WATER) && defined(NEED_SOFT_WATER)

float4   main( vf I )          : COLOR
{
	half4	base	= tex2D (s_base,I.tbase);
	half3	n0	= tex2D (s_nmap,I.tnorm.xy);
	half3	n1	= tex2D (s_nmap,I.tnorm.zw);
	half3	Navg	= n0 + n1 - 1;

	half3	Nw	= mul (half3x3(I.M1, I.M2, I.M3), Navg);
			Nw	= normalize (Nw);
	half3	v2point	= normalize (I.v2point);
	half3	vreflect = reflect(v2point, Nw);

	half3	env	= calc_envmap(vreflect);

	half	fresnel	= saturate (dot(vreflect,v2point));
	half	power	= pow(fresnel,9);
	half	amount	= 0.35h + 0.25h * power; // 1=full env, 0=no env
	
	float3 vspos = tc_get_position(I.tctexgen.xy / I.tctexgen.w, I.tctexgen.z);
	float3 vsnorm = mul(m_V, Nw);

	float4  sslr = ScreenSpaceLocalReflections(vspos, vsnorm);
	
	half3 c_reflection = lerp(env,sslr.xyz,sslr.w) * amount;
	
	half3	final              = lerp(c_reflection,base.rgb,base.a);

			final	*= I.c0.xyz * 2;
			


#ifdef	NEED_SOFT_WATER

	half	alpha	= 0.75h+0.25h*power;                        // 1=full env, 0=no env

#ifdef	USE_SOFT_WATER
	//	Igor: additional depth test
	half4 _P = 	tex2Dproj( s_position, I.tctexgen);
	half waterDepth = _P.z-I.tctexgen.z;

	//	water fog
	half  fog_exp_intens = -9.0h;
	float fog	= 1-exp(fog_exp_intens*waterDepth);
	half3 Fc  	= half3( 0.1h, 0.1h, 0.1h) * water_intensity.r;
	final 		= lerp (Fc, final, alpha);

	alpha 		= min(alpha, saturate(waterDepth));

	alpha 		= max (fog, alpha);

	//	Leaves
	half4	leaves	= tex2D(s_leaves, I.tbase);
			leaves.rgb *= water_intensity.r;
	half	calc_cos = -dot(float3(I.M1.z, I.M2.z, I.M3.z),  normalize(v2point));
	half	calc_depth = saturate(waterDepth*calc_cos);
	half	fLeavesFactor = smoothstep(0.025, 0.05, calc_depth );
			fLeavesFactor *= smoothstep(0.1, 0.075, calc_depth );
	final		= lerp(final, leaves, leaves.a*fLeavesFactor);
	alpha		= lerp(alpha, leaves.a, leaves.a*fLeavesFactor);

#endif	//	USE_SOFT_WATER
	final = lerp (fog_color,final,I.c0.a);
	return  half4   (final, alpha * I.c0.a * I.c0.a);
#else	//	NEED_SOFT_WATER
	final = lerp (fog_color,final,I.c0.a);
	return  half4   (final, I.c0.a * I.c0.a);
#endif	//	NEED_SOFT_WATER
}
