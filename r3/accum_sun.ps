#include "common.h"
#include "lmodel.h"
#include "shadow.h"

#ifdef MSAA_OPTIMIZATION
#ifdef GBUFFER_OPTIMIZATION
out_lighting 	main	( p_aa_AA_sun I, float4 pos2d : SV_Position, uint iSample : SV_SAMPLEINDEX ) : SV_Target
#else
out_lighting 	main	( p_aa_AA_sun I, uint iSample : SV_SAMPLEINDEX ) : SV_Target
#endif
#else
#ifdef GBUFFER_OPTIMIZATION
out_lighting 	main	( p_aa_AA_sun I, float4 pos2d : SV_Position ) : SV_Target
#else
out_lighting 	main	( p_aa_AA_sun I ) : SV_Target
#endif
#endif
{
	gbuffer_data gbd = gbuffer_load_data( GLD_P(I.tc, pos2d, ISAMPLE) );

	float4 	_P	= float4( gbd.P, gbd.mtl );
	float4	_N	= float4( gbd.N, gbd.hemi );
	float4	_C	= float4( gbd.C, gbd.gloss );

	// ----- light-model
	float 	m	= xmaterial	;
# ifndef USE_R2_STATIC_SUN
			m 	= _P.w		;
# endif

#if USE_PBR
	light_t	light = plight_infinity_pbr( m, _C, gbd.gloss, _P, _N, Ldynamic_dir );
#else
	light_t	light	= plight_infinity( m, _P, _N, _C, Ldynamic_dir );
#endif

	// ----- shadow
	float4 	s_sum;
//		s_sum.x	= tex2D	( s_smap, I.LT).x;
//		s_sum.y = tex2D	( s_smap, I.RT).y;
//		s_sum.z	= tex2D	( s_smap, I.LB).z;
//		s_sum.w = tex2D	( s_smap, I.RB).w;
		s_sum.x	= s_smap.Sample( smp_nofilter, I.LT).x;
		s_sum.y = s_smap.Sample( smp_nofilter, I.RT).y;
		s_sum.z	= s_smap.Sample( smp_nofilter, I.LB).z;
		s_sum.w = s_smap.Sample( smp_nofilter, I.RB).w;
//	float 	s 	= dot	( s_sum, 1.h/4.h);
	float 	s 	= ((s_sum.x+s_sum.y)+(s_sum.z+s_sum.w))*(1.h/4.h);

	float4 dyn_col = display_to_working_space(Ldynamic_color) * 2.0;
	out_lighting O;
	O.diffuse.rgb = dyn_col.rgb * light.diffuse * s;
	O.specular.rgb = dyn_col.rgb /** dyn_col.w*/ * light.specular * s;
	return O;
}
